<!DOCTYPE html>
<html>
<head>
    <title>web</title>
    <meta charset="UTF-8">
    <script src="https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
    <!-- 最新版本的 Bootstrap 核心 CSS 文件 -->
    <link href="/static/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
    <!-- 引入 xterm 的 CSS 文件 -->
    <link rel="stylesheet" href="https://unpkg.com/xterm@4.18.0/css/xterm.css">
    <!-- 引入 xterm 的 JavaScript 文件 -->
    <script src="https://unpkg.com/xterm@4.18.0/lib/xterm.js"></script>
</head>
<body>
    <div id="terminal"></div>
    <script>
        const window_width = $(window).width();
        const window_height = $(window).height();
        const term = new Terminal(
            {
                cols: Math.floor(window_width / 9),
                rows: Math.floor(window_height / 9),
                useStyle: false,
                convertEol: true, //启用时，光标将设置为下一行的开头
                cursorBlink: true,
                // disableStdin: false, //是否应禁用输入。
                cursorStyle: null, //光标样式
                // theme: {
                //      foreground: 'yellow', //字体
                //      background: '#060101', //背景色
                //      cursor: 'help'//设置光标
                //  }
            }
        )
        console.log("高度" + window_height + "宽度" + window_width);

        $(document).ready(function() {
            const namespace = '/ssh/ws';
            const socket = io.connect("http://" + document.domain + ":" + location.port + namespace);

            socket.on("connect", function(){
                term.open(document.getElementById('terminal'));
            });
            socket.on("response", function(recv){
                term.write(recv.data);
            });
            term.onData((data) => {
              console.log('发送消息:'+data)
              socket.emit('message', data); // 确保发送的是字符串
            });

            // 在页面刷新或关闭时关闭 WebSocket 连接
            window.addEventListener('beforeunload', function() {
                socket.close();
            });
        });

        // 示例：创建 Canvas 上下文时设置 willReadFrequently 属性
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d', { willReadFrequently: true });
    </script>
</body>
</html>