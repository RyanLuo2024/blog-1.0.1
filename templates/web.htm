<!DOCTYPE html>
<html>
<head>
    <title>web</title>
    <meta charset="UTF-8">
    <script src="https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
    <!-- 最新版本的 Bootstrap 核心 CSS 文件 -->
    <link href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.2.3/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
    <!-- 引入 xterm 的 CSS 文件 -->
    <link rel="stylesheet" href="https://unpkg.com/xterm@4.18.0/css/xterm.css">
    <!-- 引入 xterm 的 JavaScript 文件 -->
    <script src="https://unpkg.com/xterm@4.18.0/lib/xterm.js"></script>


</head>
<body>
    <div id="terminal"></div>
    <script>
        const window_width = $(window).width();
        const window_height = $(window).height();
        const term = new Terminal(
            {
                cols: Math.floor(window_width / 9),
                rows: Math.floor(window_height / 9),
                useStyle: false,
                convertEol: true, //启用时，光标将设置为下一行的开头
                cursorBlink: true,
                // disableStdin: false, //是否应禁用输入。
                cursorStyle: null, //光标样式
                // theme: {
                //      foreground: 'yellow', //字体
                //      background: '#060101', //背景色
                //      cursor: 'help'//设置光标
                //  }
            }
        )
        console.log("高度" + window_height + "宽度" + window_width);

        $(document).ready(function() {
            // 连接服务器
            const namespace = '/ws';
            const socket = io.connect("http://" + document.domain + ":" + location.port + namespace);

            socket.on("connect", function(){
                // 打开终端
                term.open(document.getElementById('terminal'));
            });

            // 接受后端数据,并写到控制台
            socket.on("response", function(recv){
                term.write(recv.data);
            });

            // terminal终端上输入的数据发送消息到服务端
            term.onData((data) => {
              console.log('发送消息:'+data)
              socket.send(data);
              // socket.emit('message', {"data":data});
            });
        });
</script>
</body>
</html>
